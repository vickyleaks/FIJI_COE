<Activity mc:Ignorable="sap sap2010" x:Class="SetTransactionStatus" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:snm="clr-namespace:System.Net.Mail;assembly=System.Net.Mail" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Exception variable that is used during transitions between states and represents a situation that does not conform to the rules of the process being automated." Name="in_BusinessException" Type="InArgument(ui:BusinessRuleException)" />
    <x:Property sap2010:Annotation.AnnotationText="Optionally used to include additional information about the transaction item." Name="in_TransactionField1" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Optionally used to include additional information about the transaction item." Name="in_TransactionField2" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Used for information and logging purposes. Ideally, the ID should be unique for each transaction. " Name="in_TransactionID" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Used during transitions between states to represent exceptions other than business exceptions." Name="in_SystemException" Type="InArgument(s:Exception)" />
    <x:Property sap2010:Annotation.AnnotationText="Dictionary structure to store configuration data of the process (settings, constants and assets)." Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property sap2010:Annotation.AnnotationText="Used to control the number of attempts of retrying the transaction processing in case of system exceptions." Name="io_RetryNumber" Type="InOutArgument(x:Int32)" />
    <x:Property sap2010:Annotation.AnnotationText="Sequential counter of transaction items." Name="io_TransactionNumber" Type="InOutArgument(x:Int32)" />
    <x:Property sap2010:Annotation.AnnotationText="Used to control the number of consecutive system exceptions." Name="io_ConsecutiveSystemExceptions" Type="InOutArgument(x:Int32)" />
    <x:Property Name="inout_dt_SummaryFile" Type="InOutArgument(sd:DataTable)" />
    <x:Property Name="in_str_startdatetime" Type="InArgument(x:String)" />
    <x:Property Name="in_str_endDateTime" Type="InArgument(x:String)" />
    <x:Property Name="in_str_receivedDate" Type="InArgument(x:String)" />
    <x:Property Name="in_str_reqDate" Type="InArgument(x:String)" />
    <x:Property Name="in_str_customerPO" Type="InArgument(x:String)" />
    <x:Property Name="in_mailMessage" Type="InArgument(snm:MailMessage)" />
    <x:Property Name="io_dt_MailStatusDataTable" Type="InOutArgument(sd:DataTable)" />
    <x:Property Name="io_RetryCounter" Type="InOutArgument(x:Int32)" />
    <x:Property sap2010:Annotation.AnnotationText="Transaction item to be processed." Name="io_TransactionItem" Type="InOutArgument(x:String)" />
    <x:Property Name="in_IsSystemException" Type="InArgument(x:Boolean)" />
    <x:Property Name="in_StrEnvironmentUsername" Type="InArgument(x:String)" />
    <x:Property Name="in_StrEnvironmentDomainName" Type="InArgument(x:String)" />
    <x:Property Name="out_objPythonReturn" Type="OutArgument(x:Object)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1240,1279</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>SetTransactionStatus_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="37">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Mail</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>UiPath.Mail.Activities.Business</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Mail.Outlook.Activities</x:String>
      <x:String>UiPath.Mail.Activities</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="68">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Python</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Flowchart sap2010:Annotation.AnnotationText="Set and log the transaction's status along with extra log fields. &#xA;There can be three possible statuses: Success, Business Exception and System Exception.&#xA;&#xA;Business Rule Exception characterizes an irregular situation according to the process's rules and prevents the transaction to be processed. The transaction is not retried in this case, since the result will be the same until the problem that causes the exception is solved.&#xA;For example, it can be considered a BusinessRuleException if a process expects to read an email's attachment, but the sender didn't attach any file. In this case, immediate retries of the transaction will not yield a different result.&#xA;&#xA;On the other hand, system exceptions are characterized by exceptions whose types are different than BusinessRuleException. When this kind of exception happens, the transaction item can be retried after closing and reopening the applications involved in the process. The rationale behind this is that the exception was caused by a problem in the applications, which might be solved by restarting them.&#xA;&#xA;If Orchestrator queues are the source of transactions, the Set Transaction Status activity is used to update the status. In addition, the retry mechanism is also implemented by Orchestrator.&#xA;&#xA;If Orchestrator queues are not used, the status can be set, for example, by writing to a specific column in a spreadsheet. In such cases, the retry mechanism is covered by the framework and the number of retries is defined in the configuration file.&#xA;&#xA;At the end, io_TransactionNumber is incremented, which makes the framework get the next transaction to be processed." DisplayName="Set Transaction Status" sap:VirtualizedContainerService.HintSize="722,1214" sap2010:WorkflowViewState.IdRef="Flowchart_2">
    <Flowchart.Variables>
      <Variable x:TypeArguments="x:Int32" Name="int_MailTableFileRowIndex" />
      <Variable x:TypeArguments="x:Int32" Name="int_MailTableMessageIDRowIndex" />
      <Variable x:TypeArguments="x:String" Name="Save_ScreenShotPath" />
      <Variable x:TypeArguments="x:String" Name="str_SinguOutputFilePath" />
      <Variable x:TypeArguments="x:String" Name="str_SinguInputFilepath" />
    </Flowchart.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <av:Point x:Key="ShapeLocation">270,2.5</av:Point>
        <av:Size x:Key="ShapeSize">60,75</av:Size>
        <x:Double x:Key="Width">687.9999999999999</x:Double>
        <av:PointCollection x:Key="ConnectorLocation">300,77.7 300,126.4</av:PointCollection>
        <x:Double x:Key="Height">840.8</x:Double>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Flowchart.StartNode>
      <x:Reference>__ReferenceID5</x:Reference>
    </Flowchart.StartNode>
    <FlowDecision x:Name="__ReferenceID5" Condition="[in_BusinessException is Nothing and in_SystemException is Nothing]" DisplayName="Is successful?" sap:VirtualizedContainerService.HintSize="76,87" sap2010:WorkflowViewState.IdRef="FlowDecision_4">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <av:Point x:Key="ShapeLocation">262.8,126.4</av:Point>
          <av:Size x:Key="ShapeSize">76,87</av:Size>
          <av:PointCollection x:Key="FalseConnector">338.8,169.9 449,169.9 449,266.4</av:PointCollection>
          <av:PointCollection x:Key="TrueConnector">262.8,169.9 110,169.9 110,481.6</av:PointCollection>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <FlowDecision.True>
        <FlowStep x:Name="__ReferenceID4">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <av:Point x:Key="ShapeLocation">10,481.6</av:Point>
              <av:Size x:Key="ShapeSize">200,162</av:Size>
              <av:PointCollection x:Key="ConnectorLocation">110,643.6 110,673.6 210,673.6 210,715.6</av:PointCollection>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence sap2010:Annotation.AnnotationText="If the transaction item is processed without any exception, its status is updated as Successful." DisplayName="Success" sap:VirtualizedContainerService.HintSize="200,162" sap2010:WorkflowViewState.IdRef="Sequence_11">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="strTemp" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="582,3278" sap2010:WorkflowViewState.IdRef="TryCatch_14">
              <TryCatch.Try>
                <Sequence sap:VirtualizedContainerService.HintSize="544,3041" sap2010:WorkflowViewState.IdRef="Sequence_48">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="RPA_Custom_Workflows\FIJI_COE_UploadFileIntoMinIO.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="482,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" UnSafe="False" WorkflowFileName="RPA_Custom_Workflows\FIJI_COE_UploadFileIntoMinIO.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="in_str_PythonScript">[in_Config("PythonScriptFilePath").ToString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_str_BucketName">[in_Config("MinIOBucketName").ToString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_str_UploadFunctionName">[in_Config("UploadPythonFunctionName").ToString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_str_PythonLanguageFilePath">[in_Config("PythonLanguageFolderPath").ToString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_str_DownloadFunctionName">[in_Config("DownloadPythonFunctionName").ToString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_str_UploadOrDownload">delete</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="str_MinioFolderName">[in_Config("MinIODownloadFolder").ToString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="str_files">[Path.GetFileName(io_TransactionItem)]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="str_ACCESS_KEY">[in_Config("MinIOUserName").ToString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="str_SECRET_KEY">[in_Config("MinIOPassword").ToString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="str_MINIO_API_HOST">[in_Config("MinIOAPIhost").ToString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="str_Folder">[in_Config("SingularityOutputsFolderPath").ToString]</InArgument>
                      <OutArgument x:TypeArguments="x:Object" x:Key="out_DotNetObject">[out_objPythonReturn]</OutArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_str_DeleteFunctionName">[in_Config("DeletePythonFunctionName").ToString]</InArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                  </ui:InvokeWorkflowFile>
                  <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[{&quot;&quot;,&quot;&quot;,&quot;&quot;,in_Config(&quot;PONumber&quot;).ToString,in_Config(&quot;POType&quot;).ToString,&quot;&quot;,in_Config(&quot;RequestDate&quot;).ToString,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername,in_Config(&quot;BotStatusSuccess&quot;),&quot;&quot;,&quot;&quot;,in_str_startdatetime,in_str_enddatetime}]" DataTable="[inout_dt_SummaryFile]" DisplayName="Adding PO details into summary data table" sap:VirtualizedContainerService.HintSize="482,195" sap2010:WorkflowViewState.IdRef="AddDataRow_9" />
                  <ui:LookupDataTable CellValue="{x:Null}" LookupColumnIndex="{x:Null}" LookupDataColumn="{x:Null}" TargetColumnIndex="{x:Null}" TargetColumnName="{x:Null}" TargetDataColumn="{x:Null}" DataTable="[io_dt_MailStatusDataTable]" DisplayName="Lookup Data Table" sap:VirtualizedContainerService.HintSize="482,301" sap2010:WorkflowViewState.IdRef="LookupDataTable_1" LookupColumnName="FileName" LookupValue="[Path.GetFileNameWithoutExtension(io_TransactionItem).split(&quot;_PO&quot;)(0)]" RowIndex="[int_MailTableFileRowIndex]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LookupDataTable>
                  <ui:LookupDataTable CellValue="{x:Null}" LookupColumnIndex="{x:Null}" LookupDataColumn="{x:Null}" TargetColumnIndex="{x:Null}" TargetColumnName="{x:Null}" TargetDataColumn="{x:Null}" DataTable="[io_dt_MailStatusDataTable]" DisplayName="Lookup Data Table" sap:VirtualizedContainerService.HintSize="482,301" sap2010:WorkflowViewState.IdRef="LookupDataTable_4" LookupColumnName="MessageID" LookupValue="[Path.GetFileName(io_TransactionItem).Split(&quot;`&quot;)(0).Replace(&quot;LESSTHAN&quot;,&quot;&lt;&quot;).Replace(&quot;GREATERTHAN&quot;,&quot;&gt;&quot;)]" RowIndex="[int_MailTableMessageIDRowIndex]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LookupDataTable>
                  <If Condition="[If(int_MailTableFileRowIndex=-1,True,If(io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(2).ToString.trim=&quot;&quot;,False,True))]" sap:VirtualizedContainerService.HintSize="482,782" sap2010:WorkflowViewState.IdRef="If_8">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <Sequence sap:VirtualizedContainerService.HintSize="400,317" sap2010:WorkflowViewState.IdRef="Sequence_38">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[{Path.GetFileNameWithoutExtension(io_TransactionItem).Split(&quot;`&quot;)(0).Replace(&quot;LESSTHAN&quot;,&quot;&lt;&quot;).Replace(&quot;GREATERTHAN&quot;,&quot;&gt;&quot;),Path.GetFileNameWithoutExtension(io_TransactionItem),in_Config(&quot;PONumber&quot;).ToString,&quot;Success&quot;,&quot;&quot;,&quot;&quot;}]" DataTable="[io_dt_MailStatusDataTable]" DisplayName="Add Data Row" sap:VirtualizedContainerService.HintSize="338,195" sap2010:WorkflowViewState.IdRef="AddDataRow_8" />
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Sequence sap:VirtualizedContainerService.HintSize="400,302" sap2010:WorkflowViewState.IdRef="Sequence_39">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_13">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(3)]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Object">["Success"]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_14">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(2)]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Object">[in_Config("PONumber").ToString]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </If.Else>
                  </If>
                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="482,61" sap2010:WorkflowViewState.IdRef="CommentOut_13">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="544,579" sap2010:WorkflowViewState.IdRef="Sequence_72">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If Condition="[Not(int_MailTableMessageIDRowIndex = -1)]" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="If_12">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Sequence sap:VirtualizedContainerService.HintSize="400,192" sap2010:WorkflowViewState.IdRef="Sequence_50">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_31">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableMessageIDRowIndex)(2)]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Object">[if(io_dt_MailStatusDataTable(int_MailTableMessageIDRowIndex)(3).ToString="Success",io_dt_MailStatusDataTable(int_MailTableMessageIDRowIndex)(2).ToString + "," + in_Config("PONumber").ToString,io_dt_MailStatusDataTable(int_MailTableMessageIDRowIndex)(2))]</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </If.Then>
                        </If>
                      </Sequence>
                    </ui:CommentOut.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:CommentOut>
                  <If Condition="[io_TransactionItem.Contains(&quot;`&quot;)]" sap:VirtualizedContainerService.HintSize="482,547" sap2010:WorkflowViewState.IdRef="If_17">
                    <If.Then>
                      <Sequence sap:VirtualizedContainerService.HintSize="400,192" sap2010:WorkflowViewState.IdRef="Sequence_73">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_32">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[str_SinguOutputFilePath]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[in_Config("ProcessedFolderPath").ToString+ Path.GetFileNameWithoutExtension(io_TransactionItem).Split("`"c)(1) + Path.GetExtension(io_TransactionItem)]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Sequence sap:VirtualizedContainerService.HintSize="400,192" sap2010:WorkflowViewState.IdRef="Sequence_74">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_39">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[str_SinguOutputFilePath]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[in_Config("ProcessedFolderPath").ToString+ Path.GetFileName(io_TransactionItem)]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </If.Else>
                  </If>
                  <ui:MoveFile ContinueOnError="{x:Null}" DestinationResource="{x:Null}" PathResource="{x:Null}" Destination="[str_SinguOutputFilePath]" DisplayName="Move File" sap:VirtualizedContainerService.HintSize="482,168" sap2010:WorkflowViewState.IdRef="MoveFile_2" Overwrite="True" Path="[io_TransactionItem]" />
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="RPA_Core_Workflows\RPA_Core_Logging_Wrapper.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="482,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_30" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Logging_Wrapper.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_config]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_Log_Message">[in_config("SC-LM-0026").ToString.Replace("{0}",str_SinguOutputFilePath)]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_Executing_Xaml">SetTransactionStatus.xaml</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_Log_Level_Type">Info</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_Log_Message_ID">SC-LM-0026</InArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                  </ui:InvokeWorkflowFile>
                </Sequence>
              </TryCatch.Try>
              <TryCatch.Catches>
                <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="548,21" sap2010:WorkflowViewState.IdRef="Catch`1_14">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ActivityAction x:TypeArguments="s:Exception">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                    </ActivityAction.Argument>
                    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,101" sap2010:WorkflowViewState.IdRef="LogMessage_19" Level="Warn" Message="[&quot;Exception occured: &quot; + exception.Message]" />
                  </ActivityAction>
                </Catch>
              </TryCatch.Catches>
              <TryCatch.Finally>
                <Assign sap:VirtualizedContainerService.HintSize="262,70" sap2010:WorkflowViewState.IdRef="Assign_29">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[io_TransactionItem]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[Nothing]</InArgument>
                  </Assign.Value>
                </Assign>
              </TryCatch.Finally>
            </TryCatch>
            <If Condition="[io_TransactionItem isNot Nothing AndAlso (io_TransactionItem.GetType is GetType(Uipath.Core.QueueItem))]" DisplayName="If TransactionItem is a QueueItem (Success)" sap:VirtualizedContainerService.HintSize="582,61" sap2010:WorkflowViewState.IdRef="If_4">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence sap:VirtualizedContainerService.HintSize="441,446" sap2010:WorkflowViewState.IdRef="Sequence_28">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="379,61" sap2010:WorkflowViewState.IdRef="CommentOut_2">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="400,219" sap2010:WorkflowViewState.IdRef="Sequence_31">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:MoveOutlookMessage Account="{x:Null}" DisplayName="Move Outlook Mail Message" sap:VirtualizedContainerService.HintSize="338,97" sap2010:WorkflowViewState.IdRef="MoveOutlookMessage_2" MailFolder="[in_Config(&quot;Move_FolderName&quot;).ToString]" MailMessage="[in_mailmessage]" />
                      </Sequence>
                    </ui:CommentOut.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:CommentOut>
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="RPA_Core_Workflows\RPA_Core_Logging_Wrapper.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_11" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Logging_Wrapper.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_Log_Message">[in_Config("SC-LM-0017").ToString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_Executing_Xaml">SetTransactionStatus</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_Log_Level_Type">Info</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_Log_Message_ID">SC-LM-0017</InArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                  </ui:InvokeWorkflowFile>
                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="379,61" sap2010:WorkflowViewState.IdRef="CommentOut_6">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="542,694" sap2010:WorkflowViewState.IdRef="Sequence_35">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:RetryScope DisplayName="Retry Set Transaction Status (Success)" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="RetryScope_2" NumberOfRetries="[Cint(in_Config(&quot;RetryNumberSetTransactionStatus&quot;))]">
                          <ui:RetryScope.ActivityBody>
                            <ActivityAction>
                              <TryCatch DisplayName="Try Catch Set Transaction Status (Success)" sap:VirtualizedContainerService.HintSize="438,468" sap2010:WorkflowViewState.IdRef="TryCatch_11">
                                <TryCatch.Try>
                                  <ui:SetTransactionStatus ContinueOnError="{x:Null}" Reason="{x:Null}" ServiceBaseAddress="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Set transaction status (Successful)" ErrorType="Application" FolderPath="[in_Config(&quot;OrchestratorQueueFolder&quot;).ToString]" sap:VirtualizedContainerService.HintSize="334,231" sap2010:WorkflowViewState.IdRef="SetTransactionStatus_4" Status="Successful" TransactionItem="[io_TransactionItem]">
                                    <ui:SetTransactionStatus.Analytics>
                                      <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                                    </ui:SetTransactionStatus.Analytics>
                                    <ui:SetTransactionStatus.Output>
                                      <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                                    </ui:SetTransactionStatus.Output>
                                  </ui:SetTransactionStatus>
                                </TryCatch.Try>
                                <TryCatch.Catches>
                                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_11">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ActivityAction x:TypeArguments="s:Exception">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                      </ActivityAction.Argument>
                                      <Sequence DisplayName="Catch Set Transaction Status (Success)" sap:VirtualizedContainerService.HintSize="400,295" sap2010:WorkflowViewState.IdRef="Sequence_23">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:LogMessage DisplayName="Log Message Could not set status (Success)" sap:VirtualizedContainerService.HintSize="338,101" sap2010:WorkflowViewState.IdRef="LogMessage_15" Level="Warn" Message="[&quot;Could not set the transaction status. &quot;+exception.Message+&quot; At Source: &quot;+exception.Source]" />
                                        <Rethrow DisplayName="Rethrow Could not set status (Success)" sap:VirtualizedContainerService.HintSize="338,32" sap2010:WorkflowViewState.IdRef="Rethrow_2" />
                                      </Sequence>
                                    </ActivityAction>
                                  </Catch>
                                </TryCatch.Catches>
                              </TryCatch>
                            </ActivityAction>
                          </ui:RetryScope.ActivityBody>
                          <ui:RetryScope.Condition>
                            <ActivityFunc x:TypeArguments="x:Boolean" />
                          </ui:RetryScope.Condition>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:RetryScope>
                      </Sequence>
                    </ui:CommentOut.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:CommentOut>
                </Sequence>
              </If.Then>
            </If>
            <Sequence sap2010:Annotation.AnnotationText="Includes custom log fields to the log message.&#xA;They are removed after logging to prevent duplicated status messages about a single transaction." DisplayName="Log Success with additional logging fields" sap:VirtualizedContainerService.HintSize="582,554" sap2010:WorkflowViewState.IdRef="Sequence_10">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:AddLogFields DisplayName="Add transaction log fields (Success)" sap:VirtualizedContainerService.HintSize="338,97" sap2010:WorkflowViewState.IdRef="AddLogFields_4">
                <ui:AddLogFields.Fields>
                  <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionStatus">Success</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionNumber">[io_TransactionNumber.ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionID">[in_TransactionID]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionField1">[in_TransactionField1]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionField2">[in_TransactionField2]</InArgument>
                </ui:AddLogFields.Fields>
              </ui:AddLogFields>
              <ui:LogMessage DisplayName="Log Message (Success)" sap:VirtualizedContainerService.HintSize="338,101" sap2010:WorkflowViewState.IdRef="LogMessage_7" Level="Info" Message="[in_Config(&quot;LogMessage_Success&quot;).ToString]" />
              <ui:RemoveLogFields DisplayName="Remove transaction log fields (Success)" sap:VirtualizedContainerService.HintSize="338,97" sap2010:WorkflowViewState.IdRef="RemoveLogFields_4">
                <ui:RemoveLogFields.Fields>
                  <scg:List x:TypeArguments="InArgument(x:String)" Capacity="8">
                    <InArgument x:TypeArguments="x:String">logF_TransactionStatus</InArgument>
                    <InArgument x:TypeArguments="x:String">logF_TransactionNumber</InArgument>
                    <InArgument x:TypeArguments="x:String">logF_TransactionID</InArgument>
                    <InArgument x:TypeArguments="x:String">logF_TransactionField1</InArgument>
                    <InArgument x:TypeArguments="x:String">logF_TransactionField2</InArgument>
                  </scg:List>
                </ui:RemoveLogFields.Fields>
              </ui:RemoveLogFields>
            </Sequence>
          </Sequence>
          <FlowStep.Next>
            <FlowStep x:Name="__ReferenceID0">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">110,715.6</av:Point>
                  <av:Size x:Key="ShapeSize">200,90</av:Size>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Sequence DisplayName="Increment transaction index and reset retries" sap:VirtualizedContainerService.HintSize="200,90" sap2010:WorkflowViewState.IdRef="Sequence_12">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign sap2010:Annotation.AnnotationText="Increment the TransactionNumber to get the next transaction to be processed." DisplayName="Assign io_TransactionNumber" sap:VirtualizedContainerService.HintSize="262.4,104" sap2010:WorkflowViewState.IdRef="Assign_7">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[io_TransactionNumber]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[io_TransactionNumber+1]</InArgument>
                  </Assign.Value>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Assign>
                <Assign sap2010:Annotation.AnnotationText="Reset the counter of retries to allow the next transaction to be retried the correct amount of times." DisplayName="Assign io_RetryNumber" sap:VirtualizedContainerService.HintSize="262.4,120" sap2010:WorkflowViewState.IdRef="Assign_8">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[io_RetryNumber]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">0</InArgument>
                  </Assign.Value>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Assign>
                <Assign sap2010:Annotation.AnnotationText="Reset the counter of consecutive system exceptions." DisplayName="Assign io_ConsecutiveSystemExceptions" sap:VirtualizedContainerService.HintSize="262.4,104" sap2010:WorkflowViewState.IdRef="Assign_9">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[io_ConsecutiveSystemExceptions]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">0</InArgument>
                  </Assign.Value>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Assign>
              </Sequence>
            </FlowStep>
          </FlowStep.Next>
        </FlowStep>
      </FlowDecision.True>
      <FlowDecision.False>
        <FlowDecision x:Name="__ReferenceID1" Condition="[in_BusinessException isnot Nothing]" DisplayName="Is Business Exception?" sap:VirtualizedContainerService.HintSize="122,87" sap2010:WorkflowViewState.IdRef="FlowDecision_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <av:Point x:Key="ShapeLocation">388,266.4</av:Point>
              <av:Size x:Key="ShapeSize">122,87</av:Size>
              <av:PointCollection x:Key="TrueConnector">388,309.733333333333 330,309.733333333333 330,469.333333333333</av:PointCollection>
              <av:PointCollection x:Key="FalseConnector">509.6,310 550,310 550,467.666666666667</av:PointCollection>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <FlowDecision.True>
            <FlowStep x:Name="__ReferenceID2">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">230,469.333333333333</av:Point>
                  <av:Size x:Key="ShapeSize">200,192</av:Size>
                  <av:PointCollection x:Key="ConnectorLocation">330,661.333333333333 330,691.333333333333 210,691.333333333333 210,715.6</av:PointCollection>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Sequence sap2010:Annotation.AnnotationText="If a BussinessRuleException is thrown during the process, the transaction item's status is updated as Failed (Exception Type: Business).&#xA;" DisplayName="Business Exception" sap:VirtualizedContainerService.HintSize="200,192" sap2010:WorkflowViewState.IdRef="Sequence_14">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="726,5441" sap2010:WorkflowViewState.IdRef="TryCatch_13">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <TryCatch.Try>
                    <Sequence sap:VirtualizedContainerService.HintSize="606,5204" sap2010:WorkflowViewState.IdRef="Sequence_47">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="RPA_Custom_Workflows\FIJI_COE_UploadFileIntoMinIO.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="544,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_14" UnSafe="False" WorkflowFileName="RPA_Custom_Workflows\FIJI_COE_UploadFileIntoMinIO.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_PythonScript">[in_Config("PythonScriptFilePath").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_BucketName">[in_Config("MinIOBucketName").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_UploadFunctionName">[in_Config("UploadPythonFunctionName").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_PythonLanguageFilePath">[in_Config("PythonLanguageFolderPath").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_DownloadFunctionName">[in_Config("DownloadPythonFunctionName").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_UploadOrDownload">delete</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="str_MinioFolderName">[in_Config("MinIODownloadFolder").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="str_files">[Path.GetFileName(io_TransactionItem)]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="str_ACCESS_KEY">[in_Config("MinIOUserName").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="str_SECRET_KEY">[in_Config("MinIOPassword").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="str_MINIO_API_HOST">[in_Config("MinIOAPIhost").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="str_Folder">[in_Config("SingularityOutputsFolderPath").ToString]</InArgument>
                          <OutArgument x:TypeArguments="x:Object" x:Key="out_DotNetObject">[out_objPythonReturn]</OutArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_DeleteFunctionName">[in_Config("DeletePythonFunctionName").ToString]</InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                      <Sequence sap:VirtualizedContainerService.HintSize="544,1962" sap2010:WorkflowViewState.IdRef="Sequence_81">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:AddDataRow DataRow="{x:Null}" sap2010:Annotation.AnnotationText="Add Data Row to Summary data table" ArrayRow="[{&quot;&quot;,&quot;&quot;,&quot;&quot;,in_Config(&quot;PONumber&quot;).ToString,in_Config(&quot;POType&quot;).ToString,&quot;&quot;,in_Config(&quot;RequestDate&quot;).ToString,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername,in_Config(&quot;BotStatusFailed&quot;),&quot;Business&quot;,in_Config(in_BusinessException.Message.Split(&quot;,&quot;c)(0)).ToString.Replace(&quot;{0}&quot;,&quot;&quot;),in_str_startdatetime,in_str_enddatetime}]" DataTable="[inout_dt_SummaryFile]" DisplayName="Add Data Row to Summary data table" sap:VirtualizedContainerService.HintSize="482,226" sap2010:WorkflowViewState.IdRef="AddDataRow_14">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:AddDataRow>
                        <ui:LookupDataTable CellValue="{x:Null}" LookupColumnIndex="{x:Null}" LookupDataColumn="{x:Null}" TargetColumnIndex="{x:Null}" TargetColumnName="{x:Null}" TargetDataColumn="{x:Null}" DataTable="[io_dt_MailStatusDataTable]" DisplayName="Lookup Data Table" sap:VirtualizedContainerService.HintSize="482,301" sap2010:WorkflowViewState.IdRef="LookupDataTable_7" LookupColumnName="MessageID" LookupValue="[Path.GetFileName(io_TransactionItem).Split(&quot;`&quot;)(0).Replace(&quot;LESSTHAN&quot;,&quot;&lt;&quot;).Replace(&quot;GREATERTHAN&quot;,&quot;&gt;&quot;)]" RowIndex="[int_MailTableFileRowIndex]">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:LookupDataTable>
                        <ui:LookupDataTable CellValue="{x:Null}" LookupColumnIndex="{x:Null}" LookupDataColumn="{x:Null}" TargetColumnIndex="{x:Null}" TargetColumnName="{x:Null}" TargetDataColumn="{x:Null}" DataTable="[io_dt_MailStatusDataTable]" DisplayName="Lookup Data Table" sap:VirtualizedContainerService.HintSize="482,301" sap2010:WorkflowViewState.IdRef="LookupDataTable_8" LookupColumnName="FileName" LookupValue="[Path.GetFileNameWithoutExtension(io_TransactionItem).split(&quot;_PO&quot;)(0)]" RowIndex="[int_MailTableFileRowIndex]">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:LookupDataTable>
                        <If Condition="[If(int_MailTableFileRowIndex=-1,True,If(io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(2).ToString.trim=&quot;&quot;,False,True))]" sap:VirtualizedContainerService.HintSize="482,892" sap2010:WorkflowViewState.IdRef="If_20">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Sequence sap:VirtualizedContainerService.HintSize="400,317" sap2010:WorkflowViewState.IdRef="Sequence_79">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[{Path.GetFileNameWithoutExtension(io_TransactionItem).Split(&quot;`&quot;)(0).Replace(&quot;LESSTHAN&quot;,&quot;&lt;&quot;).Replace(&quot;GREATERTHAN&quot;,&quot;&gt;&quot;),Path.GetFileName(io_TransactionItem),in_Config(&quot;PONumber&quot;).ToString,&quot;Business Failed&quot;,in_BusinessException.Message,&quot;&quot;}]" DataTable="[io_dt_MailStatusDataTable]" DisplayName="Add Data Row" sap:VirtualizedContainerService.HintSize="338,195" sap2010:WorkflowViewState.IdRef="AddDataRow_15" />
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Sequence sap:VirtualizedContainerService.HintSize="400,412" sap2010:WorkflowViewState.IdRef="Sequence_80">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_44">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(3)]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Object">["Business Failed"]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_45">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(2)]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Object">[in_Config("PONumber").ToString]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_46">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(4)]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Object">[in_BusinessException.Message]</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </If.Else>
                        </If>
                      </Sequence>
                      <ui:CommentOut DisplayName="Look at up sequence and below If condition" sap:VirtualizedContainerService.HintSize="544,61" sap2010:WorkflowViewState.IdRef="CommentOut_14">
                        <ui:CommentOut.Body>
                          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="544,487" sap2010:WorkflowViewState.IdRef="Sequence_82">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If Condition="[in_Config(&quot;PONumber&quot;).ToString&lt;&gt;&quot;&quot; and in_Config(&quot;RequestDate&quot;).ToString &lt;&gt; &quot;&quot;]" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="If_13">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <Sequence sap:VirtualizedContainerService.HintSize="400,90" sap2010:WorkflowViewState.IdRef="Sequence_64">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:AddDataRow DataRow="{x:Null}" sap2010:Annotation.AnnotationText="Add Data Row to Summary data table" ArrayRow="[{&quot;&quot;,&quot;&quot;,&quot;&quot;,in_Config(&quot;PONumber&quot;).ToString,in_Config(&quot;POType&quot;).ToString,&quot;&quot;,in_Config(&quot;RequestDate&quot;).ToString,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername,in_Config(&quot;BotStatusFailed&quot;),&quot;Business&quot;,in_Config(in_BusinessException.Message.Split(&quot;,&quot;c)(0)).ToString.Replace(&quot;{0}&quot;,&quot;&quot;),in_str_startdatetime,in_str_enddatetime}]" DataTable="[inout_dt_SummaryFile]" DisplayName="Add Data Row to Summary data table" sap:VirtualizedContainerService.HintSize="482,226" sap2010:WorkflowViewState.IdRef="AddDataRow_11">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:AddDataRow>
                                  <ui:LookupDataTable CellValue="{x:Null}" LookupColumnIndex="{x:Null}" LookupDataColumn="{x:Null}" TargetColumnIndex="{x:Null}" TargetColumnName="{x:Null}" TargetDataColumn="{x:Null}" DataTable="[io_dt_MailStatusDataTable]" DisplayName="Lookup Data Table" sap:VirtualizedContainerService.HintSize="482,301" sap2010:WorkflowViewState.IdRef="LookupDataTable_2" LookupColumnName="MessageID" LookupValue="[Path.GetFileName(io_TransactionItem).Split(&quot;`&quot;)(0).Replace(&quot;LESSTHAN&quot;,&quot;&lt;&quot;).Replace(&quot;GREATERTHAN&quot;,&quot;&gt;&quot;)]" RowIndex="[int_MailTableFileRowIndex]">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:LookupDataTable>
                                  <ui:LookupDataTable CellValue="{x:Null}" LookupColumnIndex="{x:Null}" LookupDataColumn="{x:Null}" TargetColumnIndex="{x:Null}" TargetColumnName="{x:Null}" TargetDataColumn="{x:Null}" DataTable="[io_dt_MailStatusDataTable]" DisplayName="Lookup Data Table" sap:VirtualizedContainerService.HintSize="482,301" sap2010:WorkflowViewState.IdRef="LookupDataTable_5" LookupColumnName="FileName" LookupValue="[Path.GetFileNameWithoutExtension(io_TransactionItem)]" RowIndex="[int_MailTableFileRowIndex]">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:LookupDataTable>
                                  <If Condition="[int_MailTableFileRowIndex=-1 or int_MailTableMessageIDRowIndex=-1]" sap:VirtualizedContainerService.HintSize="482,892" sap2010:WorkflowViewState.IdRef="If_9">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <If.Then>
                                      <Sequence sap:VirtualizedContainerService.HintSize="400,317" sap2010:WorkflowViewState.IdRef="Sequence_40">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[{Path.GetFileNameWithoutExtension(io_TransactionItem).Split(&quot;`&quot;)(0).Replace(&quot;LESSTHAN&quot;,&quot;&lt;&quot;).Replace(&quot;GREATERTHAN&quot;,&quot;&gt;&quot;),Path.GetFileName(io_TransactionItem),in_Config(&quot;PONumber&quot;).ToString,&quot;Business Failed&quot;,in_BusinessException.Message,&quot;&quot;}]" DataTable="[io_dt_MailStatusDataTable]" DisplayName="Add Data Row" sap:VirtualizedContainerService.HintSize="338,195" sap2010:WorkflowViewState.IdRef="AddDataRow_10" />
                                      </Sequence>
                                    </If.Then>
                                    <If.Else>
                                      <Sequence sap:VirtualizedContainerService.HintSize="400,412" sap2010:WorkflowViewState.IdRef="Sequence_41">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_16">
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(3)]</OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Object">["Business Failed"]</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                        <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_17">
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(2)]</OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Object">[in_Config("PONumber").ToString]</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                        <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_18">
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(4)]</OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Object">[in_BusinessException.Message]</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                      </Sequence>
                                    </If.Else>
                                  </If>
                                </Sequence>
                              </If.Then>
                            </If>
                          </Sequence>
                        </ui:CommentOut.Body>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:CommentOut>
                      <If Condition="[If(io_TransactionItem.Contains(&quot;`&quot;),(File.Exists(in_Config(&quot;InputsFolderPath&quot;).ToString+Path.GetFileNameWithoutExtension(io_TransactionItem).Split(&quot;`&quot;)(1)+&quot;.pdf&quot;)),False)]" sap:VirtualizedContainerService.HintSize="544,547" sap2010:WorkflowViewState.IdRef="If_15">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If.Then>
                          <Sequence sap:VirtualizedContainerService.HintSize="400,192" sap2010:WorkflowViewState.IdRef="Sequence_68">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_35">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[str_SinguInputFilepath]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[in_Config("InputsFolderPath").ToString+ Path.GetFileNameWithoutExtension(io_TransactionItem).Split("`")(1)+".pdf"]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Sequence sap:VirtualizedContainerService.HintSize="400,192" sap2010:WorkflowViewState.IdRef="Sequence_69">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_36">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[str_SinguInputFilepath]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[Nothing]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </If.Else>
                      </If>
                      <If Condition="[io_TransactionItem.Contains(&quot;`&quot;)]" sap:VirtualizedContainerService.HintSize="544,547" sap2010:WorkflowViewState.IdRef="If_18">
                        <If.Then>
                          <Sequence sap:VirtualizedContainerService.HintSize="400,192" sap2010:WorkflowViewState.IdRef="Sequence_75">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_40">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[str_SinguOutputFilePath]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[in_Config("ExceptionFolderPath").ToString+ Path.GetFileNameWithoutExtension(io_TransactionItem).Split("`"c)(1) + Path.GetExtension(io_TransactionItem)]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Sequence sap:VirtualizedContainerService.HintSize="400,192" sap2010:WorkflowViewState.IdRef="Sequence_76">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_41">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[str_SinguOutputFilePath]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[in_Config("ExceptionFolderPath").ToString+ Path.GetFileName(io_TransactionItem)]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </If.Else>
                      </If>
                      <ui:MoveFile ContinueOnError="{x:Null}" DestinationResource="{x:Null}" PathResource="{x:Null}" Destination="[str_SinguOutputFilePath]" DisplayName="Move File" sap:VirtualizedContainerService.HintSize="544,168" sap2010:WorkflowViewState.IdRef="MoveFile_1" Overwrite="True" Path="[io_TransactionItem]" />
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="RPA_Core_Workflows\RPA_Core_Logging_Wrapper.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="544,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_31" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Logging_Wrapper.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_config]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_Log_Message">[in_config("SC-LM-0027").ToString.Replace("{0}",str_SinguOutputFilePath)]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_Executing_Xaml">SetTransactionStatus.xaml</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_Log_Level_Type">Info</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_Log_Message_ID">SC-LM-0027</InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="544,61" sap2010:WorkflowViewState.IdRef="CommentOut_7">
                        <ui:CommentOut.Body>
                          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="624,1161" sap2010:WorkflowViewState.IdRef="Sequence_36">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If Condition="[io_TransactionItem isNot Nothing AndAlso (io_TransactionItem.GetType is GetType(Uipath.Core.QueueItem))]" DisplayName="If TransactionItem is a QueueItem (Business Exception)" sap:VirtualizedContainerService.HintSize="564,1340" sap2010:WorkflowViewState.IdRef="If_5">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <ui:RetryScope DisplayName="Retry Set Transaction Status (Business Exception)" sap:VirtualizedContainerService.HintSize="480,774" sap2010:WorkflowViewState.IdRef="RetryScope_3" NumberOfRetries="[Cint(in_Config(&quot;RetryNumberSetTransactionStatus&quot;))]">
                                  <ui:RetryScope.ActivityBody>
                                    <ActivityAction>
                                      <TryCatch DisplayName="Try Catch Set Transaction Status (Business Exception)" sap:VirtualizedContainerService.HintSize="438,590" sap2010:WorkflowViewState.IdRef="TryCatch_12">
                                        <TryCatch.Try>
                                          <Sequence sap:VirtualizedContainerService.HintSize="400,353" sap2010:WorkflowViewState.IdRef="Sequence_30">
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                            <ui:SetTransactionStatus ContinueOnError="{x:Null}" ServiceBaseAddress="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Set transaction status (Business Exception status)" ErrorType="Business" FolderPath="[in_Config(&quot;OrchestratorQueueFolder&quot;).ToString]" sap:VirtualizedContainerService.HintSize="338,231" sap2010:WorkflowViewState.IdRef="SetTransactionStatus_5" Reason="[in_BusinessException.Message]" Status="Failed" TransactionItem="[io_TransactionItem]">
                                              <ui:SetTransactionStatus.Analytics>
                                                <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                                              </ui:SetTransactionStatus.Analytics>
                                              <ui:SetTransactionStatus.Output>
                                                <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                                              </ui:SetTransactionStatus.Output>
                                            </ui:SetTransactionStatus>
                                          </Sequence>
                                        </TryCatch.Try>
                                        <TryCatch.Catches>
                                          <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_12">
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                            <ActivityAction x:TypeArguments="s:Exception">
                                              <ActivityAction.Argument>
                                                <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                              </ActivityAction.Argument>
                                              <Sequence DisplayName="Catch Set Transaction Status (Business Exception)" sap:VirtualizedContainerService.HintSize="400,295" sap2010:WorkflowViewState.IdRef="Sequence_24">
                                                <sap:WorkflowViewStateService.ViewState>
                                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                  </scg:Dictionary>
                                                </sap:WorkflowViewStateService.ViewState>
                                                <ui:LogMessage DisplayName="Log Message Could not set status (Business Exception)" sap:VirtualizedContainerService.HintSize="338,101" sap2010:WorkflowViewState.IdRef="LogMessage_16" Level="Warn" Message="[&quot;Could not set the transaction status. &quot;+exception.Message+&quot; At Source: &quot;+exception.Source]" />
                                                <Rethrow DisplayName="Rethrow  Could not set status (Business Exception)" sap:VirtualizedContainerService.HintSize="338,32" sap2010:WorkflowViewState.IdRef="Rethrow_3" />
                                              </Sequence>
                                            </ActivityAction>
                                          </Catch>
                                        </TryCatch.Catches>
                                      </TryCatch>
                                    </ActivityAction>
                                  </ui:RetryScope.ActivityBody>
                                  <ui:RetryScope.Condition>
                                    <ActivityFunc x:TypeArguments="x:Boolean" />
                                  </ui:RetryScope.Condition>
                                </ui:RetryScope>
                              </If.Then>
                            </If>
                          </Sequence>
                        </ui:CommentOut.Body>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:CommentOut>
                      <TryCatch sap2010:Annotation.AnnotationText="Take a screenshot of the current state of the screen to facilitate debugging." DisplayName="Try taking screenshot" sap:VirtualizedContainerService.HintSize="544,390" sap2010:WorkflowViewState.IdRef="TryCatch_20">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <TryCatch.Try>
                          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke TakeScreenshot workflow" sap:VirtualizedContainerService.HintSize="334,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_33" UnSafe="False" WorkflowFileName="Framework\TakeScreenshot.xaml">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Folder">[in_Config("ExceptionScreenShotFolderPath").ToString]</InArgument>
                              <InOutArgument x:TypeArguments="x:String" x:Key="io_FilePath">[Save_ScreenShotPath]</InOutArgument>
                            </ui:InvokeWorkflowFile.Arguments>
                          </ui:InvokeWorkflowFile>
                        </TryCatch.Try>
                        <TryCatch.Catches>
                          <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_20">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ActivityAction x:TypeArguments="s:Exception">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                              </ActivityAction.Argument>
                              <ui:LogMessage DisplayName="Log message (Screenshot not taken)" sap:VirtualizedContainerService.HintSize="334,101" sap2010:WorkflowViewState.IdRef="LogMessage_25" Level="Warn" Message="[&quot;Failed to take screenshot: &quot;+Exception.Message+&quot; at Source: &quot;+Exception.Source+&quot; At Source: &quot;+Exception.Source]" />
                            </ActivityAction>
                          </Catch>
                        </TryCatch.Catches>
                      </TryCatch>
                      <Switch x:TypeArguments="x:String" DisplayName="Switch" Expression="[in_BusinessException.Message.split(&quot;,&quot;)(0)]" sap:VirtualizedContainerService.HintSize="544,580" sap2010:WorkflowViewState.IdRef="Switch`1_1">
                        <Sequence x:Key="EX-LBM-NEDI-0011" sap:VirtualizedContainerService.HintSize="441,244" sap2010:WorkflowViewState.IdRef="Sequence_51">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_15" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                              </InArgument>
                              <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                              <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                              <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                                <Literal x:TypeArguments="x:Boolean" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_Missing_Singu_Columns&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_Missing_Singu_Columns&quot;).ToString.Split(&quot;;&quot;c)(1).Replace(&quot;{0}&quot;,in_BusinessException.Message.Split(&quot;,&quot;c)(1)) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                                <Literal x:TypeArguments="x:Boolean" Value="True" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                              <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                              <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                                <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{str_SinguOutputFilePath,str_SinguInputFilepath}" />
                              </InArgument>
                            </ui:InvokeWorkflowFile.Arguments>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </ui:InvokeWorkflowFile>
                        </Sequence>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="EX-LBM-NEDI-0012" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_17" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                              <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                            </InArgument>
                            <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                            <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                            <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                              <Literal x:TypeArguments="x:Boolean" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_Missing_Singu_Rows&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_Missing_Singu_Rows&quot;).ToString.Split(&quot;;&quot;c)(1).Replace(&quot;{0}&quot;,in_BusinessException.Message.Split(&quot;,&quot;c)(1)) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                              <Literal x:TypeArguments="x:Boolean" Value="True" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                            <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                            <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                              <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{str_SinguOutputFilePath,str_SinguInputFilepath}" />
                            </InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="EX-LBM-NEDI-0014" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_18" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                              <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                            </InArgument>
                            <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                            <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                            <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                              <Literal x:TypeArguments="x:Boolean" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_Missing_Singu_Location&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_Missing_Singu_Location&quot;).ToString.Split(&quot;;&quot;c)(1) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                              <Literal x:TypeArguments="x:Boolean" Value="True" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                            <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                            <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                              <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{str_SinguOutputFilePath,str_SinguInputFilepath}" />
                            </InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="EX-LBM-NEDI-0008" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_19" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                              <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                            </InArgument>
                            <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                            <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                            <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                              <Literal x:TypeArguments="x:Boolean" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_Missing_Vendorcode&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_Missing_Vendorcode&quot;).ToString.Split(&quot;;&quot;c)(1).Replace(&quot;{0}&quot;,in_BusinessException.Message.Split(&quot;,&quot;c)(1)) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                              <Literal x:TypeArguments="x:Boolean" Value="True" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                            <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                            <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                              <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{str_SinguOutputFilePath,str_SinguInputFilepath}" />
                            </InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                        <Sequence x:Key="EX-LBM-NEDI-0017" sap:VirtualizedContainerService.HintSize="441,244" sap2010:WorkflowViewState.IdRef="Sequence_53">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_20" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                              </InArgument>
                              <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                              <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                              <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                                <Literal x:TypeArguments="x:Boolean" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_Invalid_Location&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_Invalid_Location&quot;).ToString.Split(&quot;;&quot;c)(1).Replace(&quot;{0}&quot;,in_BusinessException.Message.Split(&quot;,&quot;c)(1)) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                                <Literal x:TypeArguments="x:Boolean" Value="True" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                              <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="Save_ScreenShotPath" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                              <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                                <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{Save_ScreenShotPath,str_SinguOutputFilePath,str_SinguInputFilepath}" />
                              </InArgument>
                            </ui:InvokeWorkflowFile.Arguments>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </ui:InvokeWorkflowFile>
                        </Sequence>
                        <Sequence x:Key="EX-LBM-NEDI-0006" sap:VirtualizedContainerService.HintSize="441,244" sap2010:WorkflowViewState.IdRef="Sequence_55">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_23" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                              </InArgument>
                              <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                              <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                              <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                                <Literal x:TypeArguments="x:Boolean" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_ExistingPO&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_ExistingPO&quot;).ToString.Split(&quot;;&quot;c)(1).Replace(&quot;{0}&quot;,in_BusinessException.Message.Split(&quot;,&quot;c)(1)) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                                <Literal x:TypeArguments="x:Boolean" Value="True" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                              <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                              <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                                <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{Save_ScreenShotPath,str_SinguOutputFilePath,str_SinguInputfilepath}" />
                              </InArgument>
                            </ui:InvokeWorkflowFile.Arguments>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </ui:InvokeWorkflowFile>
                        </Sequence>
                        <Sequence x:Key="EX-LBM-NEDI-0007" sap:VirtualizedContainerService.HintSize="441,244" sap2010:WorkflowViewState.IdRef="Sequence_57">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_25" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                              </InArgument>
                              <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                              <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                              <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                                <Literal x:TypeArguments="x:Boolean" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_Invalid_Orderitems&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_Invalid_Orderitems&quot;).ToString.Split(&quot;;&quot;c)(1) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                                <Literal x:TypeArguments="x:Boolean" Value="True" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                              <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                              <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                                <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{str_SinguOutputFilePath,Save_ScreenShotPath,str_SinguInputFilepath}" />
                              </InArgument>
                            </ui:InvokeWorkflowFile.Arguments>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </ui:InvokeWorkflowFile>
                        </Sequence>
                        <Sequence x:Key="EX-LBM-NEDI-0016" sap:VirtualizedContainerService.HintSize="441,244" sap2010:WorkflowViewState.IdRef="Sequence_59">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_27" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                              </InArgument>
                              <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                              <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                              <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                                <Literal x:TypeArguments="x:Boolean" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_Invalid_Orderitems&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_Invalid_Orderitems&quot;).ToString.Split(&quot;;&quot;c)(1).Replace(&quot;{0}&quot;,in_BusinessException.Message.Split(&quot;,&quot;c)(1)) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                                <Literal x:TypeArguments="x:Boolean" Value="True" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                              <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                              <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                              <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                                <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{Save_ScreenShotPath,str_SinguOutputFilePath,str_SinguInputFilepath}" />
                              </InArgument>
                            </ui:InvokeWorkflowFile.Arguments>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </ui:InvokeWorkflowFile>
                        </Sequence>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="EX-LBM-NEDI-0021" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_34" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                              <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                            </InArgument>
                            <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                            <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                            <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                              <Literal x:TypeArguments="x:Boolean" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_OverWeightExceed&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_OverWeightExceed&quot;).ToString.Split(&quot;;&quot;c)(1) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                              <Literal x:TypeArguments="x:Boolean" Value="True" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                            <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                            <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                              <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{Save_ScreenShotPath,str_SinguOutputFilePath,str_SinguInputFilepath}" />
                            </InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="EX-LBM-NEDI-0022" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_35" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                              <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                            </InArgument>
                            <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                            <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                            <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                              <Literal x:TypeArguments="x:Boolean" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_SheetdataMissed&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_SheetdataMissed&quot;).ToString.Split(&quot;;&quot;c)(1) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                              <Literal x:TypeArguments="x:Boolean" Value="True" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                            <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                            <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                              <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{str_SinguOutputFilePath,str_SinguInputFilepath}" />
                            </InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="EX-LBM-NEDI-0023" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_36" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                              <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                            </InArgument>
                            <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                            <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                            <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                              <Literal x:TypeArguments="x:Boolean" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_Location_Mapping&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_Location_Mapping&quot;).ToString.Split(&quot;;&quot;c)(1) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                              <Literal x:TypeArguments="x:Boolean" Value="True" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                            <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                            <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                              <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{str_SinguOutputFilePath,str_SinguInputFilepath,Save_ScreenShotPath}" />
                            </InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="EX-LBM-NEDI-0024" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_37" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                              <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                            </InArgument>
                            <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                            <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                            <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                              <Literal x:TypeArguments="x:Boolean" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_VendorName_Missed&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_VendorName_Missed&quot;).ToString.Split(&quot;;&quot;c)(1).Replace(&quot;{0}&quot;,in_BusinessException.Message.Split(&quot;,&quot;c)(1)) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                              <Literal x:TypeArguments="x:Boolean" Value="True" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                            <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                            <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                              <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{str_SinguOutputFilePath,str_SinguInputFilepath,Save_ScreenShotPath}" />
                            </InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="EX-LBM-NEDI-0025" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_38" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                              <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                            </InArgument>
                            <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                            <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                            <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                              <Literal x:TypeArguments="x:Boolean" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_ShipToDateMissed&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_ShipToDateMissed&quot;).ToString.Split(&quot;;&quot;c)(1) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                              <Literal x:TypeArguments="x:Boolean" Value="True" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                            <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                            <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Business&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsFrom&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsCC&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;BusinessNotificationMailsTo&quot;).ToString" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                              <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                            <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                              <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{str_SinguOutputFilePath,str_SinguInputFilepath,Save_ScreenShotPath}" />
                            </InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                      </Switch>
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="RPA_Core_Workflows\RPA_Core_Logging_Wrapper.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="544,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_32" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Logging_Wrapper.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_config]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_Log_Message">[in_config("SC-LM-0024").ToString.Replace("{0}",in_Config("BusinessNotificationMailsTo").ToString)]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_Executing_Xaml">SetTransactionStatus.xaml</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_Log_Level_Type">Info</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_Log_Message_ID">SC-LM-0024</InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                    </Sequence>
                  </TryCatch.Try>
                  <TryCatch.Catches>
                    <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="692,21" sap2010:WorkflowViewState.IdRef="Catch`1_13">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ActivityAction x:TypeArguments="s:Exception">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                        </ActivityAction.Argument>
                        <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,101" sap2010:WorkflowViewState.IdRef="LogMessage_18" Level="Warn" Message="[&quot;Exception message occured: &quot; + exception.Message]" />
                      </ActivityAction>
                    </Catch>
                  </TryCatch.Catches>
                  <TryCatch.Finally>
                    <Assign sap:VirtualizedContainerService.HintSize="262,70" sap2010:WorkflowViewState.IdRef="Assign_27">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[io_TransactionItem]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[Nothing]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </TryCatch.Finally>
                </TryCatch>
                <Sequence sap2010:Annotation.AnnotationText="Includes custom log fields to the log message.&#xA;They are removed after logging to prevent duplicated status messages about a single transaction." DisplayName="Log business exception with additional logging fields" sap:VirtualizedContainerService.HintSize="726,554" sap2010:WorkflowViewState.IdRef="Sequence_13">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:AddLogFields DisplayName="Add transaction log fields (Business Exception)" sap:VirtualizedContainerService.HintSize="338,97" sap2010:WorkflowViewState.IdRef="AddLogFields_5">
                    <ui:AddLogFields.Fields>
                      <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionStatus">BusinessException</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionNumber">[io_TransactionNumber.ToString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionID">[in_TransactionID]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionField1">[in_TransactionField1]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionField2">[in_TransactionField2]</InArgument>
                    </ui:AddLogFields.Fields>
                  </ui:AddLogFields>
                  <ui:LogMessage DisplayName="Log Message (Business Exception)" sap:VirtualizedContainerService.HintSize="338,101" sap2010:WorkflowViewState.IdRef="LogMessage_8" Level="Error" Message="[in_Config(&quot;LogMessage_BusinessRuleException&quot;).ToString + in_BusinessException.Message]" />
                  <ui:RemoveLogFields DisplayName="Remove transaction log fields (Business Exception)" sap:VirtualizedContainerService.HintSize="338,97" sap2010:WorkflowViewState.IdRef="RemoveLogFields_5">
                    <ui:RemoveLogFields.Fields>
                      <scg:List x:TypeArguments="InArgument(x:String)" Capacity="8">
                        <InArgument x:TypeArguments="x:String">logF_TransactionStatus</InArgument>
                        <InArgument x:TypeArguments="x:String">logF_TransactionNumber</InArgument>
                        <InArgument x:TypeArguments="x:String">logF_TransactionID</InArgument>
                        <InArgument x:TypeArguments="x:String">logF_TransactionField1</InArgument>
                        <InArgument x:TypeArguments="x:String">logF_TransactionField2</InArgument>
                      </scg:List>
                    </ui:RemoveLogFields.Fields>
                  </ui:RemoveLogFields>
                </Sequence>
              </Sequence>
              <FlowStep.Next>
                <x:Reference>__ReferenceID0</x:Reference>
              </FlowStep.Next>
            </FlowStep>
          </FlowDecision.True>
          <FlowDecision.False>
            <FlowStep x:Name="__ReferenceID3">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">450,467.666666666667</av:Point>
                  <av:Size x:Key="ShapeSize">200,177</av:Size>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Sequence sap2010:Annotation.AnnotationText="If a system exception occurs during the process, the transaction item's status is updated as Failed (Exception Type: Application)." DisplayName="System Exception" sap:VirtualizedContainerService.HintSize="932,7634" sap2010:WorkflowViewState.IdRef="Sequence_17">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:Boolean" Name="QueueRetry" />
                  <Variable x:TypeArguments="x:String" Name="ScreenshotPath" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:LogMessage DisplayName="Log Message (Consecutive exceptions)" sap:VirtualizedContainerService.HintSize="870,101" sap2010:WorkflowViewState.IdRef="LogMessage_17" Level="Info" Message="[&quot;Consecutive system exception counter is &quot; + io_ConsecutiveSystemExceptions.ToString + &quot;.&quot;]" />
                <If Condition="[Cint(in_Config(&quot;SystemExceptionRetries&quot;)) &gt; io_RetryCounter and CBool(in_Config(&quot;IsSystemException&quot;))]" sap:VirtualizedContainerService.HintSize="870,5917" sap2010:WorkflowViewState.IdRef="If_11">
                  <If.Then>
                    <Sequence sap:VirtualizedContainerService.HintSize="400,192" sap2010:WorkflowViewState.IdRef="Sequence_44">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_23">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">[io_RetryCounter]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">[io_RetryCounter+1]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <Sequence sap:VirtualizedContainerService.HintSize="788,5562" sap2010:WorkflowViewState.IdRef="Sequence_45">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign sap:VirtualizedContainerService.HintSize="726,70" sap2010:WorkflowViewState.IdRef="Assign_25">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">[io_TransactionNumber]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">[io_TransactionNumber+1]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign sap:VirtualizedContainerService.HintSize="726,70" sap2010:WorkflowViewState.IdRef="Assign_28">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">[io_RetryCounter]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">0</InArgument>
                        </Assign.Value>
                      </Assign>
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="RPA_Custom_Workflows\FIJI_COE_UploadFileIntoMinIO.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="726,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_13" UnSafe="False" WorkflowFileName="RPA_Custom_Workflows\FIJI_COE_UploadFileIntoMinIO.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_PythonScript">[in_Config("PythonScriptFilePath").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_BucketName">[in_Config("MinIOBucketName").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_UploadFunctionName">[in_Config("UploadPythonFunctionName").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_PythonLanguageFilePath">[in_Config("PythonLanguageFolderPath").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_DownloadFunctionName">[in_Config("DownloadPythonFunctionName").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_UploadOrDownload">delete</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="str_MinioFolderName">[in_Config("MinIODownloadFolder").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="str_files">[Path.GetFileName(io_TransactionItem)]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="str_ACCESS_KEY">[in_Config("MinIOUserName").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="str_SECRET_KEY">[in_Config("MinIOPassword").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="str_MINIO_API_HOST">[in_Config("MinIOAPIhost").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="str_Folder">[in_Config("SingularityOutputsFolderPath").ToString]</InArgument>
                          <OutArgument x:TypeArguments="x:Object" x:Key="out_DotNetObject">[out_objPythonReturn]</OutArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_str_DeleteFunctionName">[in_Config("DeletePythonFunctionName").ToString]</InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                      <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="726,5058" sap2010:WorkflowViewState.IdRef="TryCatch_15">
                        <TryCatch.Try>
                          <Sequence sap:VirtualizedContainerService.HintSize="688,4821" sap2010:WorkflowViewState.IdRef="Sequence_49">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If Condition="[in_Config(&quot;PONumber&quot;).ToString&lt;&gt;&quot;&quot; and in_Config(&quot;RequestDate&quot;).ToString &lt;&gt; &quot;&quot;]" sap:VirtualizedContainerService.HintSize="626,2410" sap2010:WorkflowViewState.IdRef="If_14">
                              <If.Then>
                                <Sequence sap:VirtualizedContainerService.HintSize="544,2134" sap2010:WorkflowViewState.IdRef="Sequence_66">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:AddDataRow DataRow="{x:Null}" sap2010:Annotation.AnnotationText="Add Data Row to Summary report" ArrayRow="[{&quot;&quot;,&quot;&quot;,&quot;&quot;,in_Config(&quot;PONumber&quot;).ToString,in_Config(&quot;POType&quot;).ToString,&quot;&quot;,in_Config(&quot;RequestDate&quot;).ToString,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername,in_Config(&quot;BotStatusFailed&quot;),&quot;System&quot;,in_SystemException.Message,in_str_startdatetime,in_str_enddatetime}]" DataTable="[inout_dt_SummaryFile]" DisplayName="Add Data Row to Summary report" sap:VirtualizedContainerService.HintSize="482,226" sap2010:WorkflowViewState.IdRef="AddDataRow_13">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:AddDataRow>
                                  <ui:LookupDataTable CellValue="{x:Null}" LookupColumnIndex="{x:Null}" LookupDataColumn="{x:Null}" TargetColumnIndex="{x:Null}" TargetColumnName="{x:Null}" TargetDataColumn="{x:Null}" sap2010:Annotation.AnnotationText="lookup MessageID from MailStatus Datatable" DataTable="[io_dt_MailStatusDataTable]" DisplayName="Lookup Data Table" sap:VirtualizedContainerService.HintSize="482,332" sap2010:WorkflowViewState.IdRef="LookupDataTable_3" LookupColumnName="MessageID" LookupValue="[Path.GetFileName(io_TransactionItem).Split(&quot;`&quot;)(0)]" RowIndex="[int_MailTableMessageIDRowIndex]">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:LookupDataTable>
                                  <ui:LookupDataTable CellValue="{x:Null}" LookupColumnIndex="{x:Null}" LookupDataColumn="{x:Null}" TargetColumnIndex="{x:Null}" TargetColumnName="{x:Null}" TargetDataColumn="{x:Null}" sap2010:Annotation.AnnotationText="lookup Filename from MailStatus Datatable" DataTable="[io_dt_MailStatusDataTable]" DisplayName="Lookup Data Table" sap:VirtualizedContainerService.HintSize="482,332" sap2010:WorkflowViewState.IdRef="LookupDataTable_6" LookupColumnName="FileName" LookupValue="[Path.GetFileNameWithoutExtension(io_TransactionItem).split(&quot;_PO&quot;)(0)]" RowIndex="[int_MailTableFileRowIndex]">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:LookupDataTable>
                                  <If Condition="[If(int_MailTableFileRowIndex=-1,True,If(io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(2).ToString.trim=&quot;&quot;,False,True))]" DisplayName="If " sap:VirtualizedContainerService.HintSize="482,1002" sap2010:WorkflowViewState.IdRef="If_10">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <If.Then>
                                      <Sequence sap:VirtualizedContainerService.HintSize="400,317" sap2010:WorkflowViewState.IdRef="Sequence_42">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[{Path.GetFileNameWithoutExtension(io_TransactionItem).Split(&quot;`&quot;)(0).Replace(&quot;LESSTHAN&quot;,&quot;&lt;&quot;).Replace(&quot;GREATERTHAN&quot;,&quot;&gt;&quot;),Path.GetFileName(io_TransactionItem),in_Config(&quot;PONumber&quot;).ToString,&quot;System Failed&quot;,in_SystemException.Message,ScreenshotPath}]" DataTable="[io_dt_MailStatusDataTable]" DisplayName="Add Data Row" sap:VirtualizedContainerService.HintSize="338,195" sap2010:WorkflowViewState.IdRef="AddDataRow_12" />
                                      </Sequence>
                                    </If.Then>
                                    <If.Else>
                                      <Sequence sap:VirtualizedContainerService.HintSize="400,522" sap2010:WorkflowViewState.IdRef="Sequence_43">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_19">
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(3)]</OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Object">["System Failed"]</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                        <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_20">
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(2)]</OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Object">[in_Config("PONumber").ToString]</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                        <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_21">
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(4)]</OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Object">[in_SystemException.Message]</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                        <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_22">
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Object">[io_dt_MailStatusDataTable(int_MailTableFileRowIndex)(5)]</OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Object">[ScreenshotPath]</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                      </Sequence>
                                    </If.Else>
                                  </If>
                                </Sequence>
                              </If.Then>
                              <If.Else>
                                <Sequence sap:VirtualizedContainerService.HintSize="400,113" sap2010:WorkflowViewState.IdRef="Sequence_67">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </Sequence>
                              </If.Else>
                            </If>
                            <If Condition="[If(io_TransactionItem.Contains(&quot;`&quot;),(File.Exists(in_Config(&quot;InputsFolderPath&quot;).ToString+Path.GetFileNameWithoutExtension(io_TransactionItem).Split(&quot;`&quot;)(1)+&quot;.pdf&quot;)),False)]" sap:VirtualizedContainerService.HintSize="626,547" sap2010:WorkflowViewState.IdRef="If_16">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <Sequence sap:VirtualizedContainerService.HintSize="400,192" sap2010:WorkflowViewState.IdRef="Sequence_70">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_37">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">[str_SinguInputFilepath]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">[in_Config("InputsFolderPath").ToString+ Path.GetFileNameWithoutExtension(io_TransactionItem).Split("`")(1)+".pdf"]</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </If.Then>
                              <If.Else>
                                <Sequence sap:VirtualizedContainerService.HintSize="400,192" sap2010:WorkflowViewState.IdRef="Sequence_71">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_38">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">[str_SinguInputFilepath]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">
                                        <Literal x:TypeArguments="x:String" Value="" />
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </If.Else>
                            </If>
                            <If Condition="[io_TransactionItem.Contains(&quot;`&quot;)]" sap:VirtualizedContainerService.HintSize="626,547" sap2010:WorkflowViewState.IdRef="If_19">
                              <If.Then>
                                <Sequence sap:VirtualizedContainerService.HintSize="400,192" sap2010:WorkflowViewState.IdRef="Sequence_77">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_42">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">[str_SinguOutputFilePath]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">[in_Config("ExceptionFolderPath").ToString+ Path.GetFileNameWithoutExtension(io_TransactionItem).Split("`"c)(1) + Path.GetExtension(io_TransactionItem)]</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </If.Then>
                              <If.Else>
                                <Sequence sap:VirtualizedContainerService.HintSize="400,192" sap2010:WorkflowViewState.IdRef="Sequence_78">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <Assign sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_43">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">[str_SinguOutputFilePath]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">[in_Config("ExceptionFolderPath").ToString+ Path.GetFileName(io_TransactionItem)]</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </If.Else>
                            </If>
                            <ui:MoveFile ContinueOnError="{x:Null}" DestinationResource="{x:Null}" PathResource="{x:Null}" Destination="[str_SinguOutputFilePath]" DisplayName="Move File" sap:VirtualizedContainerService.HintSize="626,168" sap2010:WorkflowViewState.IdRef="MoveFile_3" Overwrite="True" Path="[io_TransactionItem]" />
                            <TryCatch sap2010:Annotation.AnnotationText="Take a screenshot of the current state of the screen to facilitate debugging." DisplayName="Try taking screenshot" sap:VirtualizedContainerService.HintSize="626,390" sap2010:WorkflowViewState.IdRef="TryCatch_5">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <TryCatch.Try>
                                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke TakeScreenshot workflow" sap:VirtualizedContainerService.HintSize="334,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="Framework\TakeScreenshot.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_Folder">[in_Config("ExceptionScreenShotFolderPath").ToString]</InArgument>
                                    <InOutArgument x:TypeArguments="x:String" x:Key="io_FilePath">[Save_ScreenShotPath]</InOutArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                              </TryCatch.Try>
                              <TryCatch.Catches>
                                <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_5">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ActivityAction x:TypeArguments="s:Exception">
                                    <ActivityAction.Argument>
                                      <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                                    </ActivityAction.Argument>
                                    <ui:LogMessage DisplayName="Log message (Screenshot not taken)" sap:VirtualizedContainerService.HintSize="334,101" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="Warn" Message="[&quot;Failed to take screenshot: &quot;+Exception.Message+&quot; at Source: &quot;+Exception.Source+&quot; At Source: &quot;+Exception.Source]" />
                                  </ActivityAction>
                                </Catch>
                              </TryCatch.Catches>
                            </TryCatch>
                            <Switch x:TypeArguments="x:String" DisplayName="Switch" Expression="[in_SystemException.Message]" sap:VirtualizedContainerService.HintSize="626,437" sap2010:WorkflowViewState.IdRef="Switch`1_2">
                              <Switch.Default>
                                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_29" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                      <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                                    </InArgument>
                                    <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                                    <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                                    <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                                      <Literal x:TypeArguments="x:Boolean" Value="True" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_System_Exception&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_System_Exception&quot;).ToString.Split(&quot;;&quot;c)(1).Replace(&quot;{0}&quot;,in_SystemException.Message) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                                      <Literal x:TypeArguments="x:Boolean" Value="True" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                                    <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Application&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ApplicationExceptionMailsFrom&quot;).ToString" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ApplicationExceptionMailsCC&quot;).ToString" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ApplicationExceptionMailsTo&quot;).ToString" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                                    <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                                      <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{str_SinguOutputFilePath,Save_ScreenShotPath,str_SinguInputFilepath}" />
                                    </InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:InvokeWorkflowFile>
                              </Switch.Default>
                              <Sequence x:Key="EX-LAM-NEDI-0009" sap:VirtualizedContainerService.HintSize="441,244" sap2010:WorkflowViewState.IdRef="Sequence_60">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Workflow File_MW" sap:VirtualizedContainerService.HintSize="379,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_28" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="RPA_Core_Workflows\RPA_Core_Mail_Wrapper.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                      <VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="in_Config" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_Server_Type">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ServerType&quot;).ToString" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_Mail_Operation_Type">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailOperationType&quot;).ToString.Split(&quot;,&quot;c)(1)" />
                                    </InArgument>
                                    <OutArgument x:TypeArguments="scg:List(snm:MailMessage)" x:Key="out_MailMessages" />
                                    <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Email_Message" />
                                    <OutArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="out_Attachments_List" />
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="in_isDefault_Account">
                                      <Literal x:TypeArguments="x:Boolean" Value="True" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_Email_Body">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Body_Multiple_Popups&quot;).ToString.Split(&quot;;&quot;c)(0) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Email_Body_Multiple_Popups&quot;).ToString.Split(&quot;;&quot;c)(1) &amp; &quot;&lt;BR&gt;&quot; &amp; &quot;&lt;BR&gt;&quot; &amp; in_Config(&quot;Mail_Signature&quot;).ToString.Replace(&quot;&lt;RobotID&gt;&quot;,in_StrEnvironmentDomainName+&quot;\&quot;+in_StrEnvironmentUsername)" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_Recepients_Type">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;MailRecepientsType&quot;).ToString.Split(&quot;;&quot;c)(0)" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsBody_HTML">
                                      <Literal x:TypeArguments="x:Boolean" Value="True" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsAutodiscover_Enabled" />
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsMailFilter" />
                                    <InArgument x:TypeArguments="x:String" x:Key="in_Subject">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Email_Subject_Application&quot;).ToString.Replace(&quot;Process Name&quot;,in_Config(&quot;logF_BusinessProcessName&quot;).ToString)" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_FromAddress">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ApplicationExceptionMailsFrom&quot;).ToString" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_CCAddress">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ApplicationExceptionMailsCC&quot;).ToString" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_ToAddress">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ApplicationExceptionMailsTo&quot;).ToString" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_BusinessAttachmentPath">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="str_SinguOutputFilePath" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_LogMessageID" />
                                    <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="in_Arr_Attachments">
                                      <VisualBasicValue x:TypeArguments="scg:IEnumerable(x:String)" ExpressionText="{}{Save_ScreenShotPath,str_SinguOutputFilePath,str_SinguInputFilepath}" />
                                    </InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:InvokeWorkflowFile>
                              </Sequence>
                            </Switch>
                          </Sequence>
                        </TryCatch.Try>
                        <TryCatch.Catches>
                          <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="692,21" sap2010:WorkflowViewState.IdRef="Catch`1_15">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ActivityAction x:TypeArguments="s:Exception">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                              </ActivityAction.Argument>
                              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,101" sap2010:WorkflowViewState.IdRef="LogMessage_20" Level="Warn" Message="[&quot;Exception occured: &quot; + exception.Message]" />
                            </ActivityAction>
                          </Catch>
                        </TryCatch.Catches>
                        <TryCatch.Finally>
                          <Assign sap:VirtualizedContainerService.HintSize="262,70" sap2010:WorkflowViewState.IdRef="Assign_30">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">[io_TransactionItem]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">[Nothing]</InArgument>
                            </Assign.Value>
                          </Assign>
                        </TryCatch.Finally>
                      </TryCatch>
                    </Sequence>
                  </If.Else>
                </If>
                <Assign DisplayName="Assign QueryRetry" sap:VirtualizedContainerService.HintSize="870,70" sap2010:WorkflowViewState.IdRef="Assign_10">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Boolean">[QueueRetry]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Boolean">[io_TransactionItem isNot Nothing AndAlso (io_TransactionItem.GetType is GetType(UiPath.Core.QueueItem))]</InArgument>
                  </Assign.Value>
                </Assign>
                <If Condition="[QueueRetry]" DisplayName="If TransactionItem is a QueueItem (System Exception)" sap:VirtualizedContainerService.HintSize="870,61" sap2010:WorkflowViewState.IdRef="If_6">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <Sequence sap:VirtualizedContainerService.HintSize="400,183" sap2010:WorkflowViewState.IdRef="Sequence_25">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="CommentOut_8">
                        <ui:CommentOut.Body>
                          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="404,183" sap2010:WorkflowViewState.IdRef="Sequence_37">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:RetryScope DisplayName="Retry Set Transaction Status (System Exception)" sap:VirtualizedContainerService.HintSize="342,61" sap2010:WorkflowViewState.IdRef="RetryScope_1" NumberOfRetries="[Cint(in_Config(&quot;RetryNumberSetTransactionStatus&quot;))]">
                              <ui:RetryScope.ActivityBody>
                                <ActivityAction>
                                  <TryCatch DisplayName="Try Catch Set Transaction Status (System Exception)" sap:VirtualizedContainerService.HintSize="440,562" sap2010:WorkflowViewState.IdRef="TryCatch_10">
                                    <TryCatch.Try>
                                      <Sequence DisplayName="Try Set Transaction Status (System Exception)" sap:VirtualizedContainerService.HintSize="400,293" sap2010:WorkflowViewState.IdRef="Sequence_21">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:SetTransactionStatus ContinueOnError="{x:Null}" ServiceBaseAddress="{x:Null}" Details="[if(String.IsNullOrEmpty(ScreenshotPath),String.Empty,&quot;Screenshot: &quot;+ ScreenshotPath)]" DisplayName="Set transaction status (System Exception)" ErrorType="Application" FolderPath="[in_Config(&quot;OrchestratorQueueFolder&quot;).ToString]" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="SetTransactionStatus_8" Reason="[in_SystemException.Message]" Status="Failed" TransactionItem="[io_TransactionItem]">
                                          <ui:SetTransactionStatus.Analytics>
                                            <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                                          </ui:SetTransactionStatus.Analytics>
                                          <ui:SetTransactionStatus.Output>
                                            <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                                          </ui:SetTransactionStatus.Output>
                                          <ui:SetTransactionStatus.TimeoutMS>
                                            <InArgument x:TypeArguments="x:Int32" />
                                          </ui:SetTransactionStatus.TimeoutMS>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:SetTransactionStatus>
                                        <Assign DisplayName="Assign RetryNumber from Queue" sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_11">
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Int32">[io_RetryNumber]</OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Int32">[io_TransactionItem.RetryNo]</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                      </Sequence>
                                    </TryCatch.Try>
                                    <TryCatch.Catches>
                                      <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="406,21" sap2010:WorkflowViewState.IdRef="Catch`1_10">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ActivityAction x:TypeArguments="s:Exception">
                                          <ActivityAction.Argument>
                                            <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                          </ActivityAction.Argument>
                                          <Sequence DisplayName="Catch Set Transaction Status (System Exception)" sap:VirtualizedContainerService.HintSize="400,295" sap2010:WorkflowViewState.IdRef="Sequence_20">
                                            <sap:WorkflowViewStateService.ViewState>
                                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                              </scg:Dictionary>
                                            </sap:WorkflowViewStateService.ViewState>
                                            <ui:LogMessage DisplayName="Log Message Could not set status (System Exception)" sap:VirtualizedContainerService.HintSize="338,101" sap2010:WorkflowViewState.IdRef="LogMessage_14" Message="[&quot;Could not set the transaction status. &quot;+exception.Message]" />
                                            <Rethrow DisplayName="Rethrow  Could not set status (System Exception)" sap:VirtualizedContainerService.HintSize="338,32" sap2010:WorkflowViewState.IdRef="Rethrow_1" />
                                          </Sequence>
                                        </ActivityAction>
                                      </Catch>
                                    </TryCatch.Catches>
                                  </TryCatch>
                                </ActivityAction>
                              </ui:RetryScope.ActivityBody>
                              <ui:RetryScope.Condition>
                                <ActivityFunc x:TypeArguments="x:Boolean" />
                              </ui:RetryScope.Condition>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:RetryScope>
                          </Sequence>
                        </ui:CommentOut.Body>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:CommentOut>
                    </Sequence>
                  </If.Then>
                </If>
                <ui:AddLogFields DisplayName="Add transaction log fields (System Exception)" sap:VirtualizedContainerService.HintSize="870,97" sap2010:WorkflowViewState.IdRef="AddLogFields_6">
                  <ui:AddLogFields.Fields>
                    <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionStatus">ApplicationException</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionNumber">[io_TransactionNumber.ToString]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionID">[in_TransactionID]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionField1">[in_TransactionField1]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="logF_TransactionField2">[in_TransactionField2]</InArgument>
                  </ui:AddLogFields.Fields>
                </ui:AddLogFields>
                <Assign DisplayName="Increment consecutive exceptions counter" sap:VirtualizedContainerService.HintSize="741,70" sap2010:WorkflowViewState.IdRef="Assign_12">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[io_ConsecutiveSystemExceptions]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[io_ConsecutiveSystemExceptions+1]</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="741,332" sap2010:WorkflowViewState.IdRef="CommentOut_9">
                  <ui:CommentOut.Body>
                    <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="400,244" sap2010:WorkflowViewState.IdRef="Sequence_46">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke RetryCurrentTransaction workflow" sap:VirtualizedContainerService.HintSize="338,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_6" UnSafe="False" WorkflowFileName="Framework/RetryCurrentTransaction.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
                          <InOutArgument x:TypeArguments="x:Int32" x:Key="io_RetryNumber">[io_RetryNumber]</InOutArgument>
                          <InOutArgument x:TypeArguments="x:Int32" x:Key="io_TransactionNumber">[io_TransactionNumber]</InOutArgument>
                          <InArgument x:TypeArguments="s:Exception" x:Key="in_SystemException">[in_SystemException]</InArgument>
                          <InArgument x:TypeArguments="x:Boolean" x:Key="in_QueueRetry">[QueueRetry]</InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                    </Sequence>
                  </ui:CommentOut.Body>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:CommentOut>
                <ui:RemoveLogFields DisplayName="Remove transaction log fields (System Exception)" sap:VirtualizedContainerService.HintSize="726,97" sap2010:WorkflowViewState.IdRef="RemoveLogFields_6">
                  <ui:RemoveLogFields.Fields>
                    <scg:List x:TypeArguments="InArgument(x:String)" Capacity="8">
                      <InArgument x:TypeArguments="x:String">logF_TransactionStatus</InArgument>
                      <InArgument x:TypeArguments="x:String">logF_TransactionNumber</InArgument>
                      <InArgument x:TypeArguments="x:String">logF_TransactionID</InArgument>
                      <InArgument x:TypeArguments="x:String">logF_TransactionField1</InArgument>
                      <InArgument x:TypeArguments="x:String">logF_TransactionField2</InArgument>
                    </scg:List>
                  </ui:RemoveLogFields.Fields>
                </ui:RemoveLogFields>
                <TryCatch sap2010:Annotation.AnnotationText="Close all applications before returning to the Initialization state and opening them again.&#xA;If applications cannot be closed, kill their respective processes." DisplayName="Try closing applications" sap:VirtualizedContainerService.HintSize="626,416" sap2010:WorkflowViewState.IdRef="TryCatch_7">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <TryCatch.Try>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke CloseAllApplications workflow" sap:VirtualizedContainerService.HintSize="334,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_7" UnSafe="False" WorkflowFileName="Framework\CloseAllApplications.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <scg:Dictionary x:TypeArguments="x:String, Argument" />
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </TryCatch.Try>
                  <TryCatch.Catches>
                    <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_7">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ActivityAction x:TypeArguments="s:Exception">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                        </ActivityAction.Argument>
                        <Sequence DisplayName="Close applications" sap:VirtualizedContainerService.HintSize="496,600" sap2010:WorkflowViewState.IdRef="Sequence_16">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:LogMessage DisplayName="Log message (CloseAllApplications failed)" sap:VirtualizedContainerService.HintSize="434,101" sap2010:WorkflowViewState.IdRef="LogMessage_10" Level="Warn" Message="[&quot;CloseAllApplications failed. &quot;+Exception.Message+&quot; at Source: &quot;+Exception.Source]" />
                          <TryCatch DisplayName="Try killing processes" sap:VirtualizedContainerService.HintSize="434,337.333333333333" sap2010:WorkflowViewState.IdRef="TryCatch_6">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <TryCatch.Try>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke KillAllProcesses workflow" sap:VirtualizedContainerService.HintSize="334,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_8" UnSafe="False" WorkflowFileName="Framework\KillAllProcesses.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <scg:Dictionary x:TypeArguments="x:String, Argument" />
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                            </TryCatch.Try>
                            <TryCatch.Catches>
                              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="400,165.333333333333" sap2010:WorkflowViewState.IdRef="Catch`1_6">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ActivityAction x:TypeArguments="s:Exception">
                                  <ActivityAction.Argument>
                                    <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                                  </ActivityAction.Argument>
                                  <ui:LogMessage DisplayName="Log message (KillAllProcesses failed)" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_11" Level="Warn" Message="[&quot;KillAllProcesses failed. &quot;+Exception.Message+&quot; at Source: &quot;+Exception.Source]" />
                                </ActivityAction>
                              </Catch>
                            </TryCatch.Catches>
                          </TryCatch>
                        </Sequence>
                      </ActivityAction>
                    </Catch>
                  </TryCatch.Catches>
                </TryCatch>
              </Sequence>
            </FlowStep>
          </FlowDecision.False>
        </FlowDecision>
      </FlowDecision.False>
    </FlowDecision>
    <x:Reference>__ReferenceID1</x:Reference>
    <x:Reference>__ReferenceID2</x:Reference>
    <x:Reference>__ReferenceID3</x:Reference>
    <x:Reference>__ReferenceID4</x:Reference>
    <x:Reference>__ReferenceID0</x:Reference>
  </Flowchart>
</Activity>